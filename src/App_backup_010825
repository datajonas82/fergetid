import { useEffect, useState } from 'react';
import { GraphQLClient, gql } from 'graphql-request';

const ENTUR_ENDPOINT = 'https://api.entur.io/journey-planner/v3/graphql';
const client = new GraphQLClient(ENTUR_ENDPOINT);

const NEARBY_QUERY = gql`
  query NearestStops($latitude: Float!, $longitude: Float!) {
    nearest(
      latitude: $latitude,
      longitude: $longitude,
      maximumDistance: 500000,
      maximumResults: 30,
      filterByModes: [water]
    ) {
      edges {
        node {
          distance
          place {
            ... on StopPlace {
              id
              name
              latitude
              longitude
              transportMode
              transportSubmode
            }
          }
        }
      }
    }
  }
`;

const DEPARTURES_QUERY = gql`
  query StopPlaceDepartures($id: String!) {
    stopPlace(id: $id) {
      name
      estimatedCalls(timeRange: 72100, numberOfDepartures: 20) {
        aimedDepartureTime
        destinationDisplay {
          frontText
        }
        serviceJourney {
          journeyPattern {
            line {
              transportMode
              transportSubmode
            }
          }
        }
      }
    }
  }
`;

export default function App() {
  const [location, setLocation] = useState(null);
  const [locationName, setLocationName] = useState(null);
  const [ferryStops, setFerryStops] = useState([]);
  const [highlightedStop, setHighlightedStop] = useState(null);
  const [departures, setDepartures] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    navigator.geolocation.getCurrentPosition(
      async (pos) => {
        const coords = {
          latitude: pos.coords.latitude,
          longitude: pos.coords.longitude,
        };
        setLocation(coords);

        try {
          const res = await fetch(
            `https://nominatim.openstreetmap.org/reverse?lat=${coords.latitude}&lon=${coords.longitude}&format=json&accept-language=nb`
          );
          const data = await res.json();
          const address = data.address || {};

          // Pr√∏v √• finne beste stedsnavn
          const mainPlace =
            address.city ||
            address.town ||
            address.village ||
            address.hamlet ||
            address.locality ||
            address.suburb;

          let name;
          if (mainPlace) {
            name = mainPlace;
          } else if (
            address.county ||
            address.state ||
            address.region
          ) {
            // Hvis bare county/state/region finnes, vis "i n√¶rheten av [n√¶rmeste st√∏rre sted]"
            const nearby =
              address.city ||
              address.town ||
              address.village ||
              address.hamlet ||
              address.locality ||
              address.suburb;
            if (nearby) {
              name = `i n√¶rheten av ${nearby}`;
            } else {
              name =
                address.county ||
                address.state ||
                address.region ||
                address.country ||
                'ukjent sted';
            }
          } else {
            name = address.country || 'ukjent sted';
          }

          setLocationName(name);
        } catch {
          setLocationName('ukjent sted');
        }
      },
      (err) => {
        console.error('Geolokasjon feilet:', err);
        setError('Geolokasjon feilet, kan ikke hente posisjon');
        setLoading(false);
      },
      { enableHighAccuracy: true }
    );
  }, []);

  useEffect(() => {
    if (!location) return;

    const fetchStops = async () => {
      setLoading(true);
      setError(null);
      try {
        const data = await client.request(NEARBY_QUERY, {
          latitude: location.latitude,
          longitude: location.longitude,
        });

        const places = [];
        const seenIds = new Set();

        for (const e of data.nearest.edges) {
          const { place, distance } = e.node;
          if (place && !seenIds.has(place.id)) {
            // Hent avganger for hvert stoppested
            let departures = [];
            try {
              const depData = await client.request(DEPARTURES_QUERY, { id: place.id });
              const calls = depData.stopPlace?.estimatedCalls || [];
              departures = calls
                .filter((call) => {
                  const line = call.serviceJourney?.journeyPattern?.line;
                  return line && line.transportSubmode === 'localCarFerry';
                })
                .slice(0, 3);
            } catch {
              departures = [];
            }
            // Only add stop if it has carferry departures
            if (departures.length > 0) {
              places.push({ place, distance, departures });
              seenIds.add(place.id);
            }
          }
        }

        setFerryStops(places);
        setLoading(false);
      } catch (err) {
        console.error('Feil ved henting av fergekaier:', err);
        setError('Kunne ikke hente fergekaier');
        setLoading(false);
      }
    };

    fetchStops();
  }, [location]);

  useEffect(() => {
    if (!highlightedStop) {
      setDepartures([]);
      return;
    }

    const fetchDepartures = async () => {
      try {
        const data = await client.request(DEPARTURES_QUERY, { id: highlightedStop.place.id });
        const calls = data.stopPlace?.estimatedCalls || [];

        // Filtrer avganger med relevant transportmodus
        const ferryDepartures = calls.filter((call) => {
          const line = call.serviceJourney?.journeyPattern?.line;
          if (!line) return false;
          return (
            line.transportSubmode === 'localCarFerry' ||
            line.transportMode === 'water'
          );
        });

        setDepartures(ferryDepartures);
      } catch (err) {
        console.error('Kunne ikke hente avganger:', err);
        setError('Kunne ikke hente avganger for valgt fergekai');
      }
    };

    fetchDepartures();
  }, [highlightedStop]);

  if (loading) return <p>Laster posisjon og fergekaier...</p>;

  return (
    <div className="min-h-screen bg-fuchsia-500 flex flex-col items-center py-6">
      <h1 className="text-5xl font-extrabold text-white tracking-widest mb-6">FERRYTIME</h1>

      {locationName && (
        <p className="text-lg font-medium text-white mb-4">
          üìç Din posisjon er {locationName}.
        </p>
      )}

      {error && <p className="text-red-600 font-bold">{error}</p>}

      {ferryStops.length === 0 && (
        <p className="text-white">Fant ingen bilferger i n√¶rheten.</p>
      )}

      <div className="w-full max-w-md space-y-6">
        {ferryStops.map(({ place, distance, departures }, i) => {
          const isHighlighted = highlightedStop && highlightedStop.place.id === place.id;
          return (
            <div
              key={place.id + '-' + distance}
              className={
                "relative rounded-2xl p-5 shadow-lg bg-white transition-all duration-200 " +
                (isHighlighted ? "ring-4 ring-fuchsia-400 scale-105 z-10" : "cursor-pointer")
              }
              onClick={() =>
                isHighlighted
                  ? setHighlightedStop(null)
                  : setHighlightedStop({ place, distance, departures })
              }
            >
              {/* Avstand √∏verst til venstre */}
              <div className="absolute -top-3 -left-3 bg-white rounded-lg px-3 py-1 shadow text-xs font-bold text-gray-800 border border-gray-200">
                {distance ? `${Math.round(distance / 1000)} KM` : '? KM'}
              </div>
              {/* Rutenavn */}
              <h2 className="text-3xl font-bold tracking-wide mb-2 text-gray-900">
                {place.name}
              </h2>
              <hr className="my-2" />
              {/* Avgang og ETA */}
              {departures && departures.length > 0 ? (
                <>
                  <div className="flex justify-between items-center text-lg mt-2">
                    <span className="text-gray-700">
                      Departure:{' '}
                      <span className="font-extrabold">
                        {departures[0].aimedDepartureTime
                          ? Math.max(
                              0,
                              Math.round(
                                (new Date(departures[0].aimedDepartureTime) - new Date()) / 60000
                              )
                            )
                          : '?'}{' '}
                        min
                      </span>
                    </span>
                    <span className="text-gray-700">
                      Your ETA:{' '}
                      <span
                        className={
                          "font-extrabold " +
                          (
                            (distance / 1000 / 60 < 10)
                              ? "text-green-600"
                              : (distance / 1000 / 60 >= 15)
                              ? "text-red-500"
                              : "text-black"
                          )
                        }
                      >
                        {distance
                          ? Math.round((distance / 1000 / 60) * 60)
                          : '?'}{' '}
                        min
                      </span>
                    </span>
                  </div>
                  {/* Ekstra avganger hvis valgt */}
                  {isHighlighted && departures.length > 1 && (
                    <div className="mt-4">
                      <div className="text-sm text-gray-600 font-semibold mb-1">Neste avganger:</div>
                      <ul>
                        {departures.slice(1, 4).map((dep, idx) => (
                          <li key={dep.aimedDepartureTime + '-' + idx} className="flex justify-between py-1">
                            <span>
                              {new Date(dep.aimedDepartureTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                            </span>
                            <span className="text-gray-500">{dep.destinationDisplay?.frontText}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </>
              ) : (
                <p className="mt-2 text-sm text-gray-500">Ingen avganger funnet</p>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
}

// function isFerryStopName(name) {
//   if (!name) return false;
//   const lowered = name.toLowerCase();
//   return (
//     lowered.includes('ferje') ||
//     lowered.includes('fergekai') ||
//     lowered.includes('kai') ||
//     lowered.includes('ferry')
//   );
// }
